/* Задача №1: создайте функцию, которая организует простейшей сжатие входящей символьной строки произвольного масштаба.
Сжатие происходит по следующему принципу: если в строке есть последовательность повторяющихся символов,
то она заменяется на пару код символа и количество его повтора в строчке.
Обеспечьте возможность ввода строки с клавиатуры.
Код программы: */
 
#include <iostream>//библиотека для работы с консолью
#include <string>//библиотека для работы с string

using namespace std;

string compress(string str) //функция сжатия
{
	string S;
	int count = 1;
	int z;
	for (int i(0); i < str.length(); i++)//цикл прохождения по каждому символу строки
	{
		count = 1;
		z = i;
		do //определение количества повторяющихся подряд идущий символов
		{
			if (str[z + 1] == str[z])
			{
				count++;
				z++;
			}
		} while (str[z + 1] == str[z]);
		S += "" + to_string(static_cast<int>(str[i])) + "," + to_string(count) + " "; //запись кода ASCII символа
		i = z;
	}
	return S;
}

int main()
{
	setlocale(LC_ALL, "Russian");//Русификатор
	string str1, str2; //две строки для проверки функции
	cout << "Введите стоку" << endl;
	getline(cin, str1);//запись символов в строку с клавиатуры
	str2 = compress(str1);//вызов функции
	cout << endl << str2 << endl;
	return 0;
}

/* Задача №2: Реализуйте сортировку массива вставками.(массив из целых чисел)
Код программы: */

#include <iostream>
#include <string>

using namespace std;

void insertionSort(int* arrayPtr, int length) // сортировка вставками
{
	int temp, // временная переменная для хранения значения элемента сортируемого массива
		item; // индекс предыдущего элемента
	for (int counter = 1; counter < length; counter++)
	{
		temp = arrayPtr[counter]; // инициализируем временную переменную текущим значением элемента массива
		item = counter - 1; // запоминаем индекс предыдущего элемента массива
		while (item >= 0 && arrayPtr[item] > temp) // пока индекс не равен 0 и предыдущий элемент массива больше текущего
		{
			arrayPtr[item + 1] = arrayPtr[item]; // перестановка элементов массива
			arrayPtr[item] = temp;
			item--;
		}
	}
}

int main()
{
	setlocale(LC_ALL, "ru"); //Русификатор
	int Q; //переменная для записи размера массива
	cout << "Введите размер массива" << endl;
	cin >> Q;
	cout << "Введите " << Q << " элементов" << endl;
	int* arr = new int[Q]; //создание целочисленного динамического массива
	for (int i(0); i < Q; i++) cin >> arr[i];
	insertionSort(arr, Q); // вызов функции сортировки вставками
	cout << "Вывод " << Q << " элементов" << endl;
	for (int i(0); i < Q; i++) cout << arr[i] << " ";
	delete[] arr;
	return 0;
}

/* Задача №3: Создайте программу, позволяющую находить в строке подстроку и заменять её на другую произвольную подстроку в каждом месте обнаружения.
Код программы: */

#include <iostream>
#include <string>

using namespace std;

void StrReplace(string& str, string untill, string after)//функция изменения строки
{
	int count = 0, index = 0; //Счётчики
	string l1; //временная строка
	for (int i(0); i < str.length(); i++)//цикл, проходящий по всем символам строки
	{
		if (str[i] == untill[index]) //посимвольный поиск подстроки в главной строке
		{
			count++; index++; //если буквы какой либо части главной строки и подстроки одинаковы, счётчики прибавляются
			if (count == untill.length()) //проверка того, что в части главной строки содержится полностью подстрока по результату счётчика count и длине подстроки
			{
				l1 += after; //запись во временную строку строки-замены
				count = 0; //обнуление счётчиков
				index = 0;
			}
		}
		else //если символ строки и подстроки разный, то:
		{
			l1 += str[i]; //во временную строку посимвольно переписывается главная строка
			if (count != untill.length())//проверка и обнуление счётчиков
			{
				count = 0;
				index = 0;
			}
		}
	}
	str = l1; l1.clear();//перезаписываем главную строку на то, что получилось и чистим временную
}

int main()
{
	setlocale(LC_ALL, "ru");//Русификатор
	string m_str;//создание главной строки, подстроки и строки-замены
	string sbstr;
	string astr;
	cout << "Введите строку" << endl;//заполнение строк
	getline(cin, m_str);
	cout << "Введите подстроку" << endl;
	getline(cin, sbstr);
	cout << "Введите на что изменить" << endl;
	getline(cin, astr);
	StrReplace(m_str, sbstr, astr);//вызов функции
	cout << m_str << endl;
	return 0;
}
